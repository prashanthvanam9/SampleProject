package com.bee.pdf.demo.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bee.pdf.demo.entity.Bees;
import com.bee.pdf.demo.repository.BeeRepository;
import com.bee.pdf.demo.service.IExcelDataService;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class ExcelDataServiceImpl_bkp implements IExcelDataService{

	Logger log = LoggerFactory.getLogger(ExcelDataServiceImpl_bkp.class);
	@Value("${app.upload.file:${user.home}}")
	public String EXCEL_FILE_PATH;
	
	@Autowired
	BeeRepository beeRepo;
	
	Workbook workbook;
	
	public List<Bees> getExxcelDataAsList() throws EncryptedDocumentException{
		log.info("*** Inside getExxcelDataAsList of ExcelDataServiceImpl");
		List<String> list = new ArrayList<String>();
		
		DataFormatter dataFormatter = new DataFormatter();
		
		try {
			workbook = WorkbookFactory.create(new File(EXCEL_FILE_PATH));
		}catch(Exception e) {
			e.printStackTrace();
		}
		log.info("Workbook has " + workbook.getNumberOfSheets() + " Sheets");
		
		Sheet sheet = workbook.getSheetAt(0);
		
		int noOfCols = sheet.getRow(0).getLastCellNum();
		log.info("Sheet has " + noOfCols + " Columns");
		
		for(Row row : sheet) {
			for(Cell cell : row) {
				String cellValue = dataFormatter.formatCellValue(cell);
				list.add(cellValue);
			}
		}
		
		List<Bees> beesList = createBeesList(list, noOfCols);
		//log.info("*** beesList :: "+beesList.size());
		return beesList;
	}
	
	public List<Bees> createBeesList(List<String> excelData, int noOfColumns){
		log.info("*** Inside createBeesList of ExcelDataServiceImpl :: noOfColumns: "+noOfColumns+" excelData.size(): "+excelData.size());
		
		ArrayList<Bees> invList = new ArrayList<Bees>();

		int i = noOfColumns;
		do {
			Bees inv = new Bees();

			inv.setId(Long.valueOf(excelData.get(i)));
			inv.setBeeName(excelData.get(i + 1));
			inv.setEmail(excelData.get(i + 2));
			inv.setMobileNo(excelData.get(i + 3));
			inv.setSalary(Long.valueOf(excelData.get(i + 4)));
			inv.setDoj(excelData.get(i + 5));

			invList.add(inv);
			i = i + (noOfColumns);

		} while (i < excelData.size());
		return invList;
		/*
		 * ArrayList<Bees> beesList = new ArrayList<Bees>();
		 * 
		 * int i = noOfCols; do { Bees bee = new Bees();
		 * log.info("*** Inside While - excelData.get(i): ID: "+excelData.get(i));
		 * log.info("*** Inside While - excelData.get(i+1): Name: "+excelData.get(i+1));
		 * log.info("*** Inside While - excelData.get(i+2): Email: "+excelData.get(i+2))
		 * ;
		 * log.info("*** Inside While - excelData.get(i+3): Mobile: "+excelData.get(i+3)
		 * );
		 * log.info("*** Inside While - excelData.get(i+4): Salary: "+excelData.get(i+4)
		 * );
		 * log.info("*** Inside While - excelData.get(i+5): DOJ: "+excelData.get(i+5));
		 * bee.setId(Long.valueOf(excelData.get(i)));
		 * bee.setBeeName(excelData.get(i+1)); bee.setEmail(excelData.get(i+2));
		 * bee.setMobileNo(excelData.get(i+3));
		 * bee.setSalary(Long.valueOf(excelData.get(i+4)));
		 * bee.setDoj(excelData.get(i+5)); beesList.add(bee); i = i + (noOfCols);
		 * }while(i < excelData.size()); return beesList;
		 */
	}
	
	@Override
	public int saveExcelData(List<Bees> bee) {
		log.info("*** Inside saveExcelData of ExcelDataServiceImpl bee: "+bee.size());
		bee = beeRepo.saveAll(bee);
		return bee.size();
	}
}
